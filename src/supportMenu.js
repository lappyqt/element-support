/**
 * @typedef {Object} DataRanges
 * @property {string} support
 * @property {string} norm
 * @property {string?} event
 */

/**
 * @typedef {Object} DefaultRowData
 * @property {Array<string>} support
 * @property {Array<string>} norm
 * @property {Array<string>?} event
 */

/**
 * @typedef {Object} BlacklistDataRanges
 * @property {string} support
 * @property {string} keys
 */

const SUPPORT_MENU_TITLE = "üíü –°–∞–ø–ø–æ—Ä—Ç—ã üíü";

class SupportMenu {
  static addMenuToTable() {
    const ui = SpreadsheetApp.getUi();

    ui.createMenu(SUPPORT_MENU_TITLE)
      .addSubMenu(ui
        .createMenu("‚åõ –ù–æ—Ä–º–∞")
        .addItem("üü∞ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ –¥–µ—Å. –¥—Ä–æ–±—å", "SupportMenu.convertTimeToDecimal")
        .addItem("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ—Ä–º—É", "SupportMenu.deleteSupportTime") 
      )
      .addSubMenu(ui
        .createMenu("üìì –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        .addItem("‚ùî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "SupportMenu.checkBlacklist")
      )
      .addItem("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞", "SupportMenu.deleteSupport")
      .addToUi();
  }

  static convertTimeToDecimal() {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

    if (sheet.getName() != "–ù–æ—Ä–º–∞") {
      Browser.msgBox(`–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –ª–∏—Å—Ç–µ "–ù–æ—Ä–º–∞"`);
    }

    const selectedRange = sheet.getActiveRange();
    const data = selectedRange.getDisplayValues();

    for (let i = 0; i < data.length; i++) {
      data[i] = data[i].map(x => {
        if (x.split(" ").length !== 2) {
          return x;
        }

        const time = x.split(" ");
        const hours = Number(time[0]);
        const minutes = Number(time[1]);

        return (hours + (minutes / 60)).toFixed(2).replace(".", ",");
      });
    }

    selectedRange.setValues(data);
  }

  static deleteSupportTime() {
    const ui = SpreadsheetApp.getUi();
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("–ù–æ—Ä–º–∞");
    const superiorSupportTime = sheet.getRange("E5:K21");
    const supportTime = sheet.getRange("E24:K73");

    /** 
     * @method
     * @returns {boolean}
     */
    const confirmDelete = () => {
      return ui.alert("‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ—Ä–º—É? ‚ùó", ui.ButtonSet.YES_NO) === ui.Button.YES;
    } 

    if (confirmDelete()) {
      superiorSupportTime.clearContent();
      supportTime.clearContent(); 
    }
  }

  static checkBlacklist() {
    const ui = SpreadsheetApp.getUi();

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("–ß–°");
    
    /** @type {DataRange} */
    const dataRanges = Object.create({}, {
      support: {
        value: "D5:D64"
      },
      keys: {
        value: "J5:J64"
      }
    });

    const supportBlacklist = sheet.getRange(dataRanges.support).getDisplayValues();
    const keysBlacklist = sheet.getRange(dataRanges.keys).getDisplayValues();

    /** 
     * @method
     * @returns {{ id: string, buttonResult: Button }}
     */
    const windowInteractionResult = () => {
      const window = ui.prompt(
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞ –≤ –ß–° (+ –ö–ª—é—á–∏)",
        "–£–∫–∞–∂–∏—Ç–µ ID",
        ui.ButtonSet.OK_CANCEL
      );

      return { id: window.getResponseText(), buttonResult: window.getSelectedButton() };
    }

    /** 
     * @method
     * @arg {string} id
     * @arg {Array<string>} blacklist
     * @returns {{ appears: boolean, position: number | null }}
     */
    const tryToFindInBlacklist = (id, blacklist) => {
      const index = blacklist.findIndex(x => x.includes(id));

      return {
        appears: index != -1,
        position: (index != -1) ? index + 1 : null  
      };
    } 

    /**
     * @method
     * @arg {Array<{ name: string, value: {appears: boolean, position: number | null} }>} blacklistResults
     */
    const displayResult = (blacklistResults) => {
      let result = String();

      for (let blacklistResult of blacklistResults) {
        if (blacklistResult.value.appears) {
          result = result.concat(`ID –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. [–°–ø–∏—Å–æ–∫: "${blacklistResult.name}", –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: ${blacklistResult.value.position}]\n`);
        }
      }

      if (result.length <= 0) {
        ui.alert("ID –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö");
        return;
      }

      ui.alert(result);
    }

    const interactionResult = windowInteractionResult();

    if (interactionResult.buttonResult != ui.Button.OK) {
      return;
    }

    if (interactionResult.id.length < 17 || interactionResult.id.length > 22) {
      ui.alert("–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID");
      return;
    }

    displayResult([
      { name: "–°–∞–ø–ø–æ—Ä—Ç—ã", value: tryToFindInBlacklist(interactionResult.id, supportBlacklist)},
      { name: "–ö–ª—é—á–∏", value: tryToFindInBlacklist(interactionResult.id, keysBlacklist)}
    ]);
  }

  static deleteSupport() {
    const ui = SpreadsheetApp.getUi();
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const activeSheet = spreadsheet.getActiveSheet();
    const normSheet = spreadsheet.getSheetByName("–ù–æ—Ä–º–∞");
    const eventSheet = spreadsheet.getSheetByName("–ò–≤–µ–Ω—Ç");
    const activeCell = activeSheet.getActiveCell();

    /** @type {string} */
    const supportId = activeCell.getValue();

    /** @type {DataRanges} */
    const dataRanges = Object.create({}, {
      support: {
        value: "L5:T54"
      },
      norm: {
        value: "E24:K73"
      },
      event: {
        value: "E5:I54"
      }
    });

    /** @type {DefaultRowData} */
    const defaultRowData = Object.create({}, {
      support: {
        value: ["", "", "-", "", "<@>", "", "", "", "0/3"]
      },
      norm: {
        value: ["", "", "", "", "", "", ""]
      },
      event: {
        value: ["", "", "", "", ""]
      }
    });

    /**
     * @method
     * @arg {string} id
     * @arg {Array<Array<string>>} data
     * @returns {number}
     */
    const findSupportIndex = (id, data) => {
      let index = null;

      for (let i = 0; i < data.length; i++) {
        if (data[i][4] === id) {   // 4 ==> ID
          index = i;
          break;
        }
      }

      return index;
    } 

    /** 
     * @method
     * @arg {SpreadsheetApp.Range} range
     * @arg {Array<Array<string>>} data
     * @arg {number} index
     * @arg {Array<string>} defaultValue
     */
    const deleteAndInsertDefaultValue = (range, data, index, defaultValue) => {
      data.splice(index, 1);
      data.push(defaultValue);

      range.setValues(data);
    }

    /**
     * @method 
     * @returns {boolean} */
    const confirmDelete = () => {
      return ui.alert("‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞? ‚ùó", ui.ButtonSet.YES_NO) === ui.Button.YES;
    }

    /** @method */
    const deleteFromScheduleAndNorm = () => {
      if (!confirmDelete()) return;

      const supportRange = activeSheet.getRange(dataRanges.support);
      const normRange = normSheet.getRange(dataRanges.norm);
      const eventRange = eventSheet.getRange(dataRanges.event);

      const supportData = supportRange.getDisplayValues();
      const normData = normRange.getDisplayValues();
      const eventData = eventRange.getDisplayValues();

      const index = findSupportIndex(supportId, supportData);

      deleteAndInsertDefaultValue(supportRange, supportData, index, defaultRowData.support);
      deleteAndInsertDefaultValue(normRange, normData, index, defaultRowData.norm);
      deleteAndInsertDefaultValue(eventRange, eventData, index, defaultRowData.event);
    }

    try {
      if (activeSheet.getName() != "–°–ø–∏—Å–æ–∫") {
        throw new Error(`–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ª–∏—Å—Ç–µ "–°–ø–∏—Å–æ–∫" üìÉ`);
      }
      
      if (activeCell.getColumn() != 16) { // –°—Ç–æ–ª–±–µ—Ü ID
        throw new Error("–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å ID —Å–∞–ø–ø–æ—Ä—Ç–∞ üÜî");
      }

      if (supportId.length < 17 || supportId.length > 22) {
        throw new Error("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID ‚ùï");
      }

      deleteFromScheduleAndNorm();
    }
    catch (error) {
      ui.alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  static setReprimandNotes(event) {
    /** @type {SpreadsheetApp.Range} */
    const range = event.range;
    const row = range.getRow();

    if ((range.getSheet().getName() === "–°–ø–∏—Å–æ–∫" && range.getColumn() === 20) && (row >= 5 && row <= 54)) {
      if (range.getValue() === "0/3") {
        range.setNote(null);
        return;
      }
      
      range.setNote(`–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–≥–æ–≤–æ—Ä–∞: ${new Date().toLocaleString()}`);
    }
  }
}